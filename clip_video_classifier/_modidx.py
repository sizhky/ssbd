# Autogenerated by nbdev

d = { 'settings': { 'branch': 'dev',
                'doc_baseurl': '/clip-video-classifier',
                'doc_host': 'https://sizhky.github.io',
                'git_url': 'https://github.com/sizhky/clip-video-classifier',
                'lib_path': 'clip_video_classifier'},
  'syms': { 'clip_video_classifier.app.main': {},
            'clip_video_classifier.cli': {},
            'clip_video_classifier.core': {'clip_video_classifier.core.foo': ('core.html#foo', 'clip_video_classifier/core.py')},
            'clip_video_classifier.data.dataset': { 'clip_video_classifier.data.dataset.ClipEmbeddingsDataset': ( 'data/embeddings_dataset.html#clipembeddingsdataset',
                                                                                                                  'clip_video_classifier/data/dataset.py'),
                                                    'clip_video_classifier.data.dataset.ClipEmbeddingsDataset.__getitem__': ( 'data/embeddings_dataset.html#clipembeddingsdataset.__getitem__',
                                                                                                                              'clip_video_classifier/data/dataset.py'),
                                                    'clip_video_classifier.data.dataset.ClipEmbeddingsDataset.__init__': ( 'data/embeddings_dataset.html#clipembeddingsdataset.__init__',
                                                                                                                           'clip_video_classifier/data/dataset.py'),
                                                    'clip_video_classifier.data.dataset.ClipEmbeddingsDataset.__len__': ( 'data/embeddings_dataset.html#clipembeddingsdataset.__len__',
                                                                                                                          'clip_video_classifier/data/dataset.py')},
            'clip_video_classifier.models.frame_embeddings': { 'clip_video_classifier.models.frame_embeddings.Frame2Embeddings': ( 'model/frames_to_embeddings.html#frame2embeddings',
                                                                                                                                   'clip_video_classifier/models/frame_embeddings.py'),
                                                               'clip_video_classifier.models.frame_embeddings.Frame2Embeddings.__call__': ( 'model/frames_to_embeddings.html#frame2embeddings.__call__',
                                                                                                                                            'clip_video_classifier/models/frame_embeddings.py'),
                                                               'clip_video_classifier.models.frame_embeddings.Frame2Embeddings.__init__': ( 'model/frames_to_embeddings.html#frame2embeddings.__init__',
                                                                                                                                            'clip_video_classifier/models/frame_embeddings.py'),
                                                               'clip_video_classifier.models.frame_embeddings.Frame2Embeddings.extract_clip_embeddings_for_folder': ( 'model/frames_to_embeddings.html#frame2embeddings.extract_clip_embeddings_for_folder',
                                                                                                                                                                      'clip_video_classifier/models/frame_embeddings.py'),
                                                               'clip_video_classifier.models.frame_embeddings.Frame2Embeddings.frames2clip_image_embeddings': ( 'model/frames_to_embeddings.html#frame2embeddings.frames2clip_image_embeddings',
                                                                                                                                                                'clip_video_classifier/models/frame_embeddings.py'),
                                                               'clip_video_classifier.models.frame_embeddings.frames_to_embeddings': ( 'model/frames_to_embeddings.html#frames_to_embeddings',
                                                                                                                                       'clip_video_classifier/models/frame_embeddings.py')},
            'clip_video_classifier.models.inference': { 'clip_video_classifier.models.inference.Inference': ( 'model/infer.html#inference',
                                                                                                              'clip_video_classifier/models/inference.py'),
                                                        'clip_video_classifier.models.inference.Inference.__init__': ( 'model/infer.html#inference.__init__',
                                                                                                                       'clip_video_classifier/models/inference.py'),
                                                        'clip_video_classifier.models.inference.Inference.load_model_and_clip': ( 'model/infer.html#inference.load_model_and_clip',
                                                                                                                                  'clip_video_classifier/models/inference.py'),
                                                        'clip_video_classifier.models.inference.Inference.predict_on_video_path': ( 'model/infer.html#inference.predict_on_video_path',
                                                                                                                                    'clip_video_classifier/models/inference.py')},
            'clip_video_classifier.models.timm_feature_extractor': { 'clip_video_classifier.models.timm_feature_extractor.extract_features_for_all_frames': ( 'model/timm_feature_extractor.html#extract_features_for_all_frames',
                                                                                                                                                              'clip_video_classifier/models/timm_feature_extractor.py')},
            'clip_video_classifier.models.transformer_encoder': { 'clip_video_classifier.models.transformer_encoder.PositionalEncoding': ( 'model/transformer_clip.html#positionalencoding',
                                                                                                                                           'clip_video_classifier/models/transformer_encoder.py'),
                                                                  'clip_video_classifier.models.transformer_encoder.PositionalEncoding.__init__': ( 'model/transformer_clip.html#positionalencoding.__init__',
                                                                                                                                                    'clip_video_classifier/models/transformer_encoder.py'),
                                                                  'clip_video_classifier.models.transformer_encoder.PositionalEncoding.forward': ( 'model/transformer_clip.html#positionalencoding.forward',
                                                                                                                                                   'clip_video_classifier/models/transformer_encoder.py'),
                                                                  'clip_video_classifier.models.transformer_encoder.TransformerEncoder': ( 'model/transformer_clip.html#transformerencoder',
                                                                                                                                           'clip_video_classifier/models/transformer_encoder.py'),
                                                                  'clip_video_classifier.models.transformer_encoder.TransformerEncoder.__init__': ( 'model/transformer_clip.html#transformerencoder.__init__',
                                                                                                                                                    'clip_video_classifier/models/transformer_encoder.py'),
                                                                  'clip_video_classifier.models.transformer_encoder.TransformerEncoder.forward': ( 'model/transformer_clip.html#transformerencoder.forward',
                                                                                                                                                   'clip_video_classifier/models/transformer_encoder.py'),
                                                                  'clip_video_classifier.models.transformer_encoder.collate_fn': ( 'model/transformer_clip.html#collate_fn',
                                                                                                                                   'clip_video_classifier/models/transformer_encoder.py')},
            'clip_video_classifier.preprocess.create_annotations': { 'clip_video_classifier.preprocess.create_annotations.assign': ( 'data/create_annotations.html#assign',
                                                                                                                                     'clip_video_classifier/preprocess/create_annotations.py'),
                                                                     'clip_video_classifier.preprocess.create_annotations.create_annotations': ( 'data/create_annotations.html#create_annotations',
                                                                                                                                                 'clip_video_classifier/preprocess/create_annotations.py'),
                                                                     'clip_video_classifier.preprocess.create_annotations.download_ssbd_release_zip': ( 'data/create_annotations.html#download_ssbd_release_zip',
                                                                                                                                                        'clip_video_classifier/preprocess/create_annotations.py'),
                                                                     'clip_video_classifier.preprocess.create_annotations.fill_gaps_fn': ( 'data/create_annotations.html#fill_gaps_fn',
                                                                                                                                           'clip_video_classifier/preprocess/create_annotations.py'),
                                                                     'clip_video_classifier.preprocess.create_annotations.process_xml': ( 'data/create_annotations.html#process_xml',
                                                                                                                                          'clip_video_classifier/preprocess/create_annotations.py'),
                                                                     'clip_video_classifier.preprocess.create_annotations.setup_annotations': ( 'data/create_annotations.html#setup_annotations',
                                                                                                                                                'clip_video_classifier/preprocess/create_annotations.py'),
                                                                     'clip_video_classifier.preprocess.create_annotations.update_start_ends': ( 'data/create_annotations.html#update_start_ends',
                                                                                                                                                'clip_video_classifier/preprocess/create_annotations.py'),
                                                                     'clip_video_classifier.preprocess.create_annotations.wget': ( 'data/create_annotations.html#wget',
                                                                                                                                   'clip_video_classifier/preprocess/create_annotations.py')},
            'clip_video_classifier.preprocess.download_raw_videos': { 'clip_video_classifier.preprocess.download_raw_videos.download_raw_videos': ( 'data/download_raw_videos.html#download_raw_videos',
                                                                                                                                                    'clip_video_classifier/preprocess/download_raw_videos.py'),
                                                                      'clip_video_classifier.preprocess.download_raw_videos.download_youtube_video': ( 'data/download_raw_videos.html#download_youtube_video',
                                                                                                                                                       'clip_video_classifier/preprocess/download_raw_videos.py'),
                                                                      'clip_video_classifier.preprocess.download_raw_videos.try_download_youtube_video': ( 'data/download_raw_videos.html#try_download_youtube_video',
                                                                                                                                                           'clip_video_classifier/preprocess/download_raw_videos.py')},
            'clip_video_classifier.preprocess.video_to_frames': { 'clip_video_classifier.preprocess.video_to_frames.extract_frames_for_annotations': ( 'data/video_to_frames.html#extract_frames_for_annotations',
                                                                                                                                                       'clip_video_classifier/preprocess/video_to_frames.py'),
                                                                  'clip_video_classifier.preprocess.video_to_frames.get_transform': ( 'data/video_to_frames.html#get_transform',
                                                                                                                                      'clip_video_classifier/preprocess/video_to_frames.py'),
                                                                  'clip_video_classifier.preprocess.video_to_frames.get_video': ( 'data/video_to_frames.html#get_video',
                                                                                                                                  'clip_video_classifier/preprocess/video_to_frames.py'),
                                                                  'clip_video_classifier.preprocess.video_to_frames.get_video_duration': ( 'data/video_to_frames.html#get_video_duration',
                                                                                                                                           'clip_video_classifier/preprocess/video_to_frames.py'),
                                                                  'clip_video_classifier.preprocess.video_to_frames.video_to_frames': ( 'data/video_to_frames.html#video_to_frames',
                                                                                                                                        'clip_video_classifier/preprocess/video_to_frames.py')}}}
